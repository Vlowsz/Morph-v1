import get from './get';
import set from './set';
import clean from './clean';
import remove from './remove';
declare const _default: {
    get: typeof get;
    set: typeof set;
    remove: typeof remove;
    clean: typeof clean;
};
export default _default;
interface Config {
    liffId?: string;
    redirectUri?: string;
}
interface JWTPayload {
    iss?: string;
    sub?: string;
    aud?: string;
    exp?: number;
    iat?: number;
    auth_time?: number;
    nonce?: string;
    amr?: string[];
    name?: string;
    picture?: string;
    email?: string;
}
export declare function getConfig(): Config;
export declare function setConfig(value: Config): void;
export declare function getFeatures(): string[];
export declare function setFeatures(value: string[]): void;
interface LoginTmp {
    codeVerifier: string;
}
/**
 * temporary values for LINE Login getter / setter
 */
export declare function getLoginTmp(): LoginTmp;
export declare function setLoginTmp(value: LoginTmp): void;
export declare function removeLoginTmp(): void;
/**
 * accessToken getter / setter
 */
export declare function getAccessToken(): string | null;
export declare function setAccessToken(value: string): void;
/**
 * IDToken getter / setter
 */
export declare function getIDToken(): string | null;
export declare function setIDToken(value: string): void;
/**
 * decodedIDToken getter / setter
 */
export declare function getDecodedIDToken(): JWTPayload | null;
export declare function setDecodedIDToken(value: unknown): void;
/**
 * featureToken getter / setter
 */
export declare function getFeatureToken(): string | null;
export declare function setFeatureToken(value: string): void;
export interface ProfilePlusInterface {
    regionCode: string;
}
export interface AIdInterface {
    id: string;
    t: boolean;
}
/**
 * context getter / setter
 */
export interface Context {
    type: 'utou' | 'room' | 'group' | 'none';
    utouId?: string;
    roomId?: string;
    groupId: string;
    userId?: string;
    viewType?: string;
    accessTokenHash?: string;
    /**
     * profile+ related settings
     */
    profilePlus?: ProfilePlusInterface;
    /**
     * device-related settings
     */
    d?: {
        autoplay: boolean;
        aId: AIdInterface;
    };
    /**
     * whether user can use each methods
     */
    availability: {
        shareTargetPicker: {
            permission: boolean;
            minVer: string;
        };
    };
}
export declare function getContext(): Context | null;
export declare function setContext(value: Context | null): void;
/**
 * special handle expire time in cookie
 */
export declare function setExpireTime(expires: Date): void;
export declare function getExpireTime(): string | null;
export declare function removeExpireTime(): void;
